0.0.0 - 6/22/17
-----
-First go at making a game in c++ as opposed to java
-Three main screens (MENU, MAP, GAME)
-Levels are represented as a grid with three layers
--Tile layer
--Program layer
--Item layer
-Programs have the same characteristics as in the original game
-Not all program moves have been ported yet

0.1.0 - 7/5/17
-----
-Added title screen with fading title slides
-Began work on main menu:
--Added buttons for two campaigns, one freeform, options, achievs, quit
--Added procedurally animated background
-Began implementing sound engine using "SDL_mixer"
--Must remember to include application extensions
-Added icon

0.2.0 - 7/13/17
-----
-Bugfix: after loading level, level is centered in window
-Levels that are small enough to fit entirely onscreen cannot be shifted
-Added a program display window; displays details of the selected program
-Added four more anchor points; one in the center of each side
-Added generic "Pair" class for use in pathfinding
-Added rudimentary pathfinding/distancefinding algorithm for programs
-Rebuilt the linked list:
--LinkedList is now a wrapper class for a chain of doubly-linked ListNodes
--Each ListNode is just a container with a forward pointer, backward pointer, and content pointer
--LinkedLists now cache length and are initialized with a length of zero
-Added an "Iterator" class that can only be instatiated through a linkedlist
-Added higher-resolution program core graphics

0.3.0 - 7/18/17
-----
-Renamed "ProgramMoves" as "ProgramActions"
-Converted all audio resources to FLAC (big space saver)
-Implemented distancefinding algorithm for programs:
--Programs are now shown which spaces they can reach
-Programs can only move a maximum number of times in each turn
-Added turn mechanism - "new turn" resets the move count for all programs
-Totally separated the game from the game display; new class "Game"
-Added "abandon", "win", "reset" buttons (placeholders for actual graphics coming later)
-Fixed a bug preventing GUIContainers from resetting the bounds of their contents; this required making GUIObject's "resetBounds" virtual
-Added a fading feature to all GUIObjects:
--GUIObject now includes five more fields related to fading: startAlpha, currAlpha, endAlpha, fadeInitDuration, and fadeCurrDuration
--GUIObject new method: "fade(int alpha, int durationMS)" which initiates a fade to a given alpha value in a given number of ms
--GUIObject new method: "fadeStep(int ms)" which checks if a fade is in progress and updates it by a given number of ticks
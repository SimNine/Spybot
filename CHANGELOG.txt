0.0.0 - 6/22/17
-----
-First go at making a game in c++ as opposed to java
-Three main screens (MENU, MAP, GAME)
-Levels are represented as a grid with three layers
--Tile layer
--Program layer
--Item layer
-Programs have the same characteristics as in the original game
-Not all program moves have been ported yet

0.1.0 - 7/5/17
-----
-Added title screen with fading title slides
-Began work on main menu:
--Added buttons for two campaigns, one freeform, options, achievs, quit
--Added procedurally animated background
-Began implementing sound engine using "SDL_mixer"
--Must remember to include application extensions
-Added icon

0.2.0 - 7/13/17
-----
-Bugfix: after loading level, level is centered in window
-Levels that are small enough to fit entirely onscreen cannot be shifted
-Added a program display window; displays details of the selected program
-Added four more anchor points; one in the center of each side
-Added generic "Pair" class for use in pathfinding
-Added rudimentary pathfinding/distancefinding algorithm for programs
-Rebuilt the linked list:
--LinkedList is now a wrapper class for a chain of doubly-linked ListNodes
--Each ListNode is just a container with a forward pointer, backward pointer, and content pointer
--LinkedLists now cache length and are initialized with a length of zero
-Added an "Iterator" class that can only be instatiated through a linkedlist
-Added higher-resolution program core graphics

0.3.0 - 7/18/17
-----
-Renamed "ProgramMoves" as "ProgramActions"
-Converted all audio resources to FLAC (big space saver)
-Implemented distancefinding algorithm for programs:
--Programs are now shown which spaces they can reach
-Programs can only move a maximum number of times in each turn
-Added turn mechanism - "new turn" resets the move count for all programs
-Totally separated the game from the game display; new class "Game"
-Added "abandon", "win", "reset" buttons (placeholders for actual graphics coming later)
-Fixed a bug preventing GUIContainers from resetting the bounds of their contents; this required making GUIObject's "resetBounds" virtual
-Added a fading feature to all GUIObjects:
--GUIObject now includes five more fields related to fading: startAlpha, currAlpha, endAlpha, fadeInitDuration, and fadeCurrDuration
--GUIObject new method: "fade(int alpha, int durationMS)" which initiates a fade to a given alpha value in a given number of ms
--GUIObject new method: "fadeStep(int ms)" which checks if a fade is in progress and updates it by a given number of ticks

0.4.0 - 8/2/17
-----
-Added preferences saving mechanism
--Preferences are now saved upon correct exit of the game
--Preferences include sound and music volume, fullscreen, screen size
-Added scrolling background text on main menu
-Added options menu
--Added volume sliders for sound and music
--Added text labels for each
--Added fullscreen toggle
-Added an integer array corresponding to the number owned of each type of program in each campaign
-Added a subclass ProgramInventoryDisplay of GUIContainer that displays the number of programs owned in a campaign
-Added a subclass ProgramInventoryButton in order to allow switching between "selected" programs for the purpose of placing them on the grid
-Added a button to toggle viewing of the program inventory on the map
-Added a display of the program inventory in the game
--This is primarily to select which program to place on the board
-Added a mechanism to place a program on a spawn tile on the board
-Programs now contain a LinkedList of coordinates which represent their occupied tiles
-Fixed a serious bug in GUIContainer mouseDown() and mouseUp():
--Previously, it was possible to click on multiple GUIObjects if they overlapped in the same GUIContainer
--Because of this, clicking any GUIObject that changed the objects in its own GUIContainer parent would cause its contents iterator to err due to concurrent modification
--This was noted because of the modification of ProgramInventoryDisplay
-Added a new enum DEBUG representing various levels of debug
-Added a new enum GAMESTATUS representing various degrees of debugging output

0.5.0 - 8/12/17
-----
-Added new enum MOVEPRESET in order to generate default moves
-Transcribed all default moves' data from original game
-Added new class Player to separate program movement calculations from grid data
--Player contains tools to help various types of ai
--Player contains a list of all the programs owned by this player
--Player now decides which program moves are valid
-Game class no longer changes any part of Program objects themselves--all Game now does in regards to the Program grid is keep track of pointers to occupied sectors
-Did some miscellanius quality-of-life readability and code simplification changes to Game and GameScreen
-Added new class AICore as an interface to extend Player
-Added new class AIBasic as a basic ai agent to extend AICore
--AIBasic acts as such:
--It goes through each program it owns and selects one that can still move or act
--It finds the closest enemy program to the selected program and moves towards it if it can
--It picks the selected program's first attack and uses it if it can
-Converted every instance where an x and y coordinate were necessary to a Coord struct. This makes passing coordinates between functions much more convenient.
-Renamed some DataContainer fields to be more uniform
-Added a utility function "unlockAllNodes" to mapScreen by pressing "l"
-Added the ability of programs to use their moves
-The human player cannot select moves yet - instead, the selected program's first move is picked when it is done moving
-Added functionality of damage, speedup, tileadd and tileremove actions

0.6.0 - 9/3/17
-----
-Renamed/re-ripped some of the sound resources (NOT DONE)
-Added a map saving/loading system
-Nodes now keep a list of neighbors rather than children in order to allow unlocking levels in any order
-The player's programs are now separated by campaign
-GUI rework:
--GUIContainers are now click-and-draggable by default
--Moving a GUIContainer puts it on top of its parent's GUIObject stack
--Added support in GUIContainers for a color as a background
--Programs that are done for a turn now show a check mark next to their icon
--Consolidated lots of GUIButtons into GUIContainers (especially on the game screen)
--The default GUIContainer background color is now grey {120, 120, 120, 140}
--Added a GUIContainer "pause menu" to map and game screens
--Added display to GameScreen showing the beginning of the player's and the ai's turn
-The player can now pick up credits, and a sound is played
-Some GUIButtons no longer share common resources; dataContainer now contains strings
	containing URLs to the textures it represents

1.0.0 - 12/26/17
Multiplayer framework, IDE switch
-----
TOO MUCH STUFF TO REMEMBER IT ALL - THIS MILESTONE IS A SANITY CHECK, NOT THE FINAL VERSION
-Now using Microsoft Visual Studio instead of Code::Blocks
-Began using WinSock API to pass messages over network (new DLL dependencies)
-Separated game into SpybotServer and SpybotClient
--Separated game logic:
---Client responds to user input by sending it to the Server
---Server confirms that messages received from Client are valid, then updates state, sends message back to Client
---Client updates view
--Some logical resources are shared, these are in SpybotShared
--Works on the basis of message passing: packets of fixed size, about 96 bytes
-New "Multiplayer" button on main screen
-Singleplayer is broken

1.1.0 - 1/1/18
Multiplayer chat, new GUI features
-----
-Added passing of client's username to server after connecting
-Added TextEntryBox, subclass of GUIContainer designed to receive char input
-Added a text entry immediately after title screen to get username
-Added a text entry on click of "Multiplayer" button to get server IP
-Removed command line arguments
-Added new icon in player display indicating which player/client is the server "owner"
--The server owner is the first client to connect, and has final say on timing and level selection
-Redid notification display as a stack of text, most recent at bottom of stack
--inefficient rendering, might want to optimize
-AI players now have a 200ms delay between their moves again, sleeping using system call Sleep()
-Implemented a chat display very similar to the new notification display
--Hit "T" to activate the chat display
--When activated, shows a set number of past messages
--Accepts keyboard input when activated
--Sends MSGTYPE_TEXT to server when Enter key is hit, server relays message to all clients
-The server owner can prefix messages with "/" to have the server interpret them as commands
-Added a unique int ID generator in the MiscUtil class
-Genericized Player class; a Player may have a "mind" (AICore) or not - if not, it is a human player
-PlayerID is now equal to ClientID in the case of human players
-Popup showing next player's turn shows up on all screens

1.2.0 - 1/5/18
Server-side users, internal quality rehash
-----
-Added Team class, generalized team system
--Players are now grouped into teams
--AIs are always assigned by default to team 1
-Added server-side user system
--Users can be created on server-side
--Name is no longer prompted on startup
--Added login prompt after connecting to server
-Separated text entry field into GUITextbox class and PromptBox class
--GUITextbox incorporates a cursor
--One GUITextbox is active at any time
-Eliminated DataContainer class, all global variables now prefixed with an underscore
-Began adding LobbyScreen buttons and controls
--Added buttons for gamemodes: Free-for-All, Team Deathmatch, Co-op

1.3.0 - 1/7/18
Program display redo, action messages enabled
-----
-Revamped ProgramDisplayContainer
--Now is anchored to upper-right corner
--Includes dropdown menu-like section for ProgramDisplayActionButtons
-Enabled passing of action messages from client to server
-All action types except HEAL and TILEDELETE are now functional

1.4.0 - 1/19/18
GUIObject anchor revamp
-----
-Added tooltip containing description when hovering the mouse over ProgramDisplayActionButton
-Changed GUIObject to recompute its anchor relative to its parent differently
--If an object has ANCHOR_CENTER, its displacement will be its own center to its parents' center,
	not its own upper-left corner to its parents' center
--Recomputed all GUIObject displacements
-Redid "background glow" objects
--They now fade and move more slowly
--Assigned a randomized color

1.5.0 - 5/1/18
Gamescreen animations
-----
-Added a linkedlist of Animations to GameScreen class
-Added an Animation class to encapsulate animated effects and associated subclasses for animations
--AnimationAttack (on a successful use of ACTIONTYPE_DAMAGE)
--AnimationSelect (on selection of a grid tile)
--AnimationTileFade (representing eliminated program tiles as they fade out
-Added an AnimationParticle class and associated subclasses to encapsulate particles
--AnimationParticleSquareSpeck
--AnimationParticleSelectRing
-Changed GUITextbox to take a boolean indicating whether it is censored or not (i.e., passwords)

2.0.0 - 5/5/18
Game code separation, singleplayer reintroduction
-----
-Separated and modularized Server class and server logic:
	-Server is now included by default in the client
	-A local instance of Server is created when the client opens a singleplayer game
-Added MSGTYPE_CHAT, which fills the entire contents of the message,
	(including other fields) with text
-Separated CommandProcessor from Server
-Commands sent from external clients are now echoed back their responses
-Singleplayer is now functional again

2.1.0 - 5/21/18
Overlay stack, users stored per singleplayer game
-----
-Renamed all "screen" subclasses of GUIContainer to "overlay", consolidated them in top-level "overlays" folder
-Replaced the global current overlay with a linkedlist of overlays, used as a stack, iterated through from bottom to top
-Added LocalLoginOverlay to choose between savefiles for local campaigns
-Added UserDisplay class to contain saved user data
-Refactored GUIObject and subclasses' constructors to make them more consistent
-Added a GUIButtonParameterized class, which is essentially a GUIButton except in that its lambda function takes a single paramater
-Converted GUIButtons that use preloaded string textures to procedurally generated ones
-Users are now stored per campaign
-Owned programs are now owned per user, and not stored as global variables
-Serverside, the game now checks for a win condition after every move, and sends a message to the game indicating a win for a team

2.2.0 - 5/28/18
GUI effects, achievements, stats saving
-----
-Refactored GUIObject, removed unnecessary instance variables and separated setBounds into setDisplacement and setDimensions
-Added correct transparency and fade functions to remaining GUI classes
-Fixed attack hit animation colors
-Default text-based GUIButtons now get darker when pressed
-Added campaign selection GUI and container to MainOverlay
-Added saveProgress and loadProgress functions to Main.h, which store stats and achievements to progress.dat
-Added global booleans representing the unlock state of the Nightfall and Freeform campaigns, as well as achievements
-Added new GUIContainer for achievements to MainOverlay
-Added an AchievementButton class with a backlight effect for the MainOverlay container
-Added PopupAchievement class that appears within NotifyOverlay (in a similar manner as PopupNotification)
-Added gamewide gamesWon, gamesPlayed, gamesLost, totalTimePlayed, and similar global vars as stats
-Created a few achievement icons, implemented acquisition of time-based achievements
-Refactored pause menus on the mapOverlay and gameOverlay
-Removed GUIObject's fade() and fadeStep(int) methods
-Added GUIEffect system; GUI effects such as Fade and Transform are now encapsulated in objects, which are queued up per GUIObject